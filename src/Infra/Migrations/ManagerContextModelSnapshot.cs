// <auto-generated />
using System;
using Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace _4__Infra.Migrations
{
    [DbContext(typeof(ManagerContext))]
    partial class ManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Command", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("description");

                    b.Property<long>("DeviceId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Command", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Device", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("description");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("identifier");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("manufacturer");

                    b.Property<long?>("MeasurementId")
                        .HasColumnType("BIGINT")
                        .HasColumnName("MeasurementId");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementId");

                    b.ToTable("Device", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Measurement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("DATETIME2")
                        .HasColumnName("dateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Value")
                        .HasColumnType("DECIMAL(18,2)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("Measurement", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateTime = new DateTime(2024, 4, 4, 18, 29, 20, 0, DateTimeKind.Utc),
                            Name = "São Paulo",
                            Value = 10m
                        },
                        new
                        {
                            Id = 2L,
                            DateTime = new DateTime(2024, 4, 4, 18, 29, 20, 0, DateTimeKind.Utc),
                            Name = "Rio de Janeiro",
                            Value = 15m
                        },
                        new
                        {
                            Id = 3L,
                            DateTime = new DateTime(2024, 4, 4, 18, 29, 20, 0, DateTimeKind.Utc),
                            Name = "Brasília",
                            Value = 12m
                        },
                        new
                        {
                            Id = 4L,
                            DateTime = new DateTime(2024, 4, 4, 18, 29, 20, 0, DateTimeKind.Utc),
                            Name = "Salvador",
                            Value = 18m
                        },
                        new
                        {
                            Id = 5L,
                            DateTime = new DateTime(2024, 4, 4, 18, 29, 20, 0, DateTimeKind.Utc),
                            Name = "Fortaleza",
                            Value = 9m
                        },
                        new
                        {
                            Id = 6L,
                            DateTime = new DateTime(2024, 4, 4, 18, 29, 20, 0, DateTimeKind.Utc),
                            Name = "Curitiba",
                            Value = 20m
                        },
                        new
                        {
                            Id = 7L,
                            DateTime = new DateTime(2024, 4, 4, 18, 29, 20, 0, DateTimeKind.Utc),
                            Name = "Recife",
                            Value = 16m
                        },
                        new
                        {
                            Id = 8L,
                            DateTime = new DateTime(2024, 4, 4, 18, 29, 20, 0, DateTimeKind.Utc),
                            Name = "Manaus",
                            Value = 13m
                        },
                        new
                        {
                            Id = 9L,
                            DateTime = new DateTime(2024, 4, 4, 18, 29, 20, 0, DateTimeKind.Utc),
                            Name = "Porto Alegre",
                            Value = 11m
                        },
                        new
                        {
                            Id = 10L,
                            DateTime = new DateTime(2024, 4, 4, 18, 29, 20, 0, DateTimeKind.Utc),
                            Name = "Belém",
                            Value = 14m
                        },
                        new
                        {
                            Id = 11L,
                            DateTime = new DateTime(2024, 4, 4, 18, 29, 20, 0, DateTimeKind.Utc),
                            Name = "Goiânia",
                            Value = 17m
                        },
                        new
                        {
                            Id = 12L,
                            DateTime = new DateTime(2024, 4, 4, 18, 29, 20, 0, DateTimeKind.Utc),
                            Name = "Florianópolis",
                            Value = 19m
                        },
                        new
                        {
                            Id = 13L,
                            DateTime = new DateTime(2024, 4, 4, 18, 29, 20, 0, DateTimeKind.Utc),
                            Name = "Vitória",
                            Value = 8m
                        },
                        new
                        {
                            Id = 14L,
                            DateTime = new DateTime(2024, 4, 4, 18, 29, 20, 0, DateTimeKind.Utc),
                            Name = "Natal",
                            Value = 21m
                        },
                        new
                        {
                            Id = 15L,
                            DateTime = new DateTime(2024, 4, 4, 18, 29, 20, 0, DateTimeKind.Utc),
                            Name = "João Pessoa",
                            Value = 22m
                        },
                        new
                        {
                            Id = 16L,
                            DateTime = new DateTime(2024, 4, 4, 18, 29, 20, 0, DateTimeKind.Utc),
                            Name = "Campo Grande",
                            Value = 23m
                        },
                        new
                        {
                            Id = 17L,
                            DateTime = new DateTime(2024, 4, 4, 18, 29, 20, 0, DateTimeKind.Utc),
                            Name = "Teresina",
                            Value = 24m
                        },
                        new
                        {
                            Id = 18L,
                            DateTime = new DateTime(2024, 4, 4, 18, 29, 20, 0, DateTimeKind.Utc),
                            Name = "Cuiabá",
                            Value = 25m
                        },
                        new
                        {
                            Id = 19L,
                            DateTime = new DateTime(2024, 4, 4, 18, 29, 20, 0, DateTimeKind.Utc),
                            Name = "São Luís",
                            Value = 26m
                        },
                        new
                        {
                            Id = 20L,
                            DateTime = new DateTime(2024, 4, 4, 18, 29, 20, 0, DateTimeKind.Utc),
                            Name = "Maceió",
                            Value = 27m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Parameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CommandId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CommandId");

                    b.ToTable("Parameter", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("VARCHAR(180)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR(30)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Command", b =>
                {
                    b.HasOne("Domain.Entities.Device", null)
                        .WithMany("Commands")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Device", b =>
                {
                    b.HasOne("Domain.Entities.Measurement", "Measurement")
                        .WithMany("Devices")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Measurement");
                });

            modelBuilder.Entity("Domain.Entities.Parameter", b =>
                {
                    b.HasOne("Domain.Entities.Command", null)
                        .WithMany("Parameters")
                        .HasForeignKey("CommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Command", b =>
                {
                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("Domain.Entities.Device", b =>
                {
                    b.Navigation("Commands");
                });

            modelBuilder.Entity("Domain.Entities.Measurement", b =>
                {
                    b.Navigation("Devices");
                });
#pragma warning restore 612, 618
        }
    }
}
